"""Add transfer_group_id to transactions

Revision ID: e193e426689b
Revises: 4a460b07ba42
Create Date: 2025-07-08 00:14:19.453460

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'e193e426689b'
down_revision: Union[str, Sequence[str], None] = '4a460b07ba42'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('investment')
    op.drop_table('debt_transaction')
    op.drop_table('debt')
    op.drop_table('category')
    op.drop_table('subscription')
    op.drop_table('saving_account')
    op.drop_table('monthlysummary')
    op.drop_index(op.f('idx_transactions_source_type'), table_name='transaction')
    op.drop_table('transaction')
    op.drop_table('account')
    op.drop_index(op.f('ix_user_email'), table_name='user')
    op.drop_table('user')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('hashed_password', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('role', sa.VARCHAR(), server_default=sa.text("'user'::character varying"), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='user_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True)
    op.create_table('account',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('balance', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('account_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('account_pkey'))
    )
    op.create_table('transaction',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('type', postgresql.ENUM('income', 'expense', 'transfer', name='transactiontype'), autoincrement=False, nullable=False),
    sa.Column('date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('saving_account_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('from_account_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('to_account_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('transaction_fee', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('is_cancelled', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('reversed_transaction_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('debt_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('source_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('transfer_group_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['category.id'], name=op.f('transaction_category_id_fkey')),
    sa.ForeignKeyConstraint(['debt_id'], ['debt.id'], name=op.f('fk_transaction_debt_id'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['from_account_id'], ['saving_account.id'], name=op.f('fk_transaction_from_account_id'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['from_account_id'], ['saving_account.id'], name=op.f('transaction_from_account_id_fkey')),
    sa.ForeignKeyConstraint(['reversed_transaction_id'], ['transaction.id'], name=op.f('fk_transaction_reversed_transaction_id'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['saving_account_id'], ['saving_account.id'], name=op.f('fk_transaction_saving_account_id'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['saving_account_id'], ['saving_account.id'], name=op.f('transaction_saving_account_id_fkey')),
    sa.ForeignKeyConstraint(['to_account_id'], ['saving_account.id'], name=op.f('fk_transaction_to_account_id'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['to_account_id'], ['saving_account.id'], name=op.f('transaction_to_account_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('transaction_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('transaction_pkey'))
    )
    op.create_index(op.f('idx_transactions_source_type'), 'transaction', ['source_type'], unique=False)
    op.create_table('monthlysummary',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('month', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('year', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('total_income', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('total_expense', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('net_saving', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('suggestion', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('monthlysummary_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('monthlysummary_pkey'))
    )
    op.create_table('saving_account',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('type', postgresql.ENUM('cash', 'bank', 'investment', name='savingaccounttype'), autoincrement=False, nullable=False),
    sa.Column('balance', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('currency', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('closed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('saving_account_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('saving_account_pkey'))
    )
    op.create_table('subscription',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('start_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('end_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('subscription_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('subscription_pkey'))
    )
    op.create_table('category',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(length=20), server_default=sa.text("'expense'::character varying"), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('category_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('category_pkey'))
    )
    op.create_table('debt',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('debt_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('total_amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('interest_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('due_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('active', 'closed', name='debtstatus'), server_default=sa.text("'active'::debtstatus"), autoincrement=False, nullable=False),
    sa.Column('currency', postgresql.ENUM('COP', 'USD', 'EUR', name='currency'), server_default=sa.text("'COP'::currency"), autoincrement=False, nullable=False),
    sa.Column('kind', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='debt_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='debt_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('debt_transaction',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('debt_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['debt_id'], ['debt.id'], name=op.f('debt_transaction_debt_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('debt_transaction_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('debt_transaction_pkey'))
    )
    op.create_table('investment',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('invested_amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('current_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('investment_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('investment_pkey'))
    )
    # ### end Alembic commands ###
